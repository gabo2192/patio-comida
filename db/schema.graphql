enum Service {
  DELIVERY
  STOREPICKUP
}
enum Role {
  USER
  SELLER
  ADMIN
}

enum PaymentMethod {
  VISA
  MASTERCARD
  CASH
}

enum Status {
  PENDING
  APROVED
  READY
  DELIVERED
  COMPLETED
  CANCELED
}

type Address @embedded {
  name: String!
  address: String!
  lat: Float!
  lng: Float!
}

type Market @collection(name: "markets") {
  name: String! @unique
  path: String!
  logo: String!
  services: [Service!]!
  phone: String!
  whatsapp: String!
  address: Address!
  published: Boolean!
  products: [Product] @relation
  owner: User!
  paymentMethods: [PaymentMethod!]!
  schedule: String!
}

type Product @collection(name: "products") {
  title: String!
  description: String!
  price: Float!
  image: String!
  market: Market!
  dailyStock: Int!
  stock: Int!
  timesBought: Int!
  category: String!
  featured: Boolean!
  dayBoolean: Boolean!
  scheduleBoolean: Boolean!
  rating: Float!
  owner: User! @relation(name: "owner")
}

type User @collection(name: "users") {
  authId: String! @unique
  avatar: String!
  role: Role!
  market: Market
  products: [Product] @relation(name: "owner")
  email: String
  phone: String
  name: String
  address: [Address]
  whatsapp: String
  cart: [CartItem]
  order: [Order]
}

type CartItem @embedded {
  item: Product
  quantity: Int!
  user: User!
}

type OrderItem @embedded {
  productId: ID!
  title: String!
  description: String!
  market: Market!
  image: String!
  price: Float!
  quantity: Int!
  user: User
}

type Order @collection(name: "orders") {
  products: [OrderItem!]!
  total: Float!
  user: User!
  createdAt: Date!
  status: Status!
}

type Query {
  allMarkets: [Market!]! @index(name: "all_markets")
  allProducts: [Product]! @index(name: "all_products")
  findUserByAuthId(authId: String!): User
}
